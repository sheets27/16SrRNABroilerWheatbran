#load packages
library(car)
library(qiime2R)
library(ape)
library(dplyr)
library(ggplot2)
library(gplots)
library(lme4)
library(phangorn)
library(phyloseq)
library(plotly)
library(tidyr)
library(vegan)
library(VennDiagram)
library(naniar)
library(zoo)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(sjstats)
library(psych)
library(pwr)
library(summarytools)
library(ggfortify)
library(effsize)
library(afex)

##############################################
#These are the things that  we need from Qiime:
#
#core-metrics-results/all alpha diversity vector.qza
#core-metrics-results/all beta diversity pcoa_results.qza
#core-metrics-results/rarefied_table.qza
#q2-picrust2_output/pathway_abundance.qza
#rooted-tree.qza
#taxonomy.qza
#ileal_metadata.tsv
##############################################
work_dir <- "C:/Users/Tessa/Desktop/ANSC_595/IRP/exp1/ileal/R/Needed"
setwd(work_dir)
list.files()

qq.line = function(x) {
  y <- quantile(x[!is.na(x)], c(0.25, 0.75))
  x <- qnorm(c(0.25, 0.75))
  slope <- diff(y)/diff(x)
  int <- y[1L] - slope * x[1L]
  return(c(int = int, slope = slope))
}

#perform this once in the beginning and then make it a note
#dir.create("output")

metadata <- read.delim("ileal_metadata.tsv", sep = "\t", header = T, quote = "\"", stringsAsFactors = F)
metadata <-read_q2metadata("ileal_metadata.tsv")

#"clean up" metadata#
data_new <- metadata
data_new <- mutate(data_new, diet = recode(.x=diet, "W"="Wheat_Bran", "Con"="Control")) 
colnames(data_new)[3]<-c("Diet")
taxonomy<-read_qza("taxonomy.qza")
taxonomy<-parse_taxonomy(taxonomy$data)
tax2 <- taxonomy
tax2[] <- t(apply(tax2, 1, zoo::na.locf))
tax.clean <- tax2

##############################################
#Obtain Beta-Diversity (Bray-Curtis) Ellipses#
##############################################
bc_PCoA<-read_qza("bray_curtis_pcoa_results.qza")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Diet"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)
colnames(centroids)[1] <- "Diet"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=Diet)) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) 

ggsave(paste0("output/BC-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a PDF 3 inches by 4 inches

##############################################
#Obtain Beta-Diversity (Unweighted Unifrac) Ellipses#
##############################################
Unwuni_PCoA<-read_qza("unweighted_unifrac_pcoa_results.qza")

Unwuni_meta <- Unwuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Diet"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),Unwuni_meta,mean)
colnames(centroids)[1] <- "Diet"

ggplot(Unwuni_meta, aes(x=PC1, y=PC2, color=Diet)) +
  geom_point() + 
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Unwuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Unwuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) 

ggsave(paste0("output/Unwuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

##############################################
#Obtain Beta-Diversity (Weighted Unifrac) Ellipses#
##############################################
Wuni_PCoA<-read_qza("weighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Diet"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),Wuni_meta,mean)
colnames(centroids)[1] <- "Diet"

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=Diet)) +
  geom_point() + 
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)"))

ggsave(paste0("output/Wuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") 

##############################################
#Obtain Beta-Diversity (Jaccard) Ellipses#
##############################################
Jacc_PCoA<-read_qza("jaccard_pcoa_results.qza")

Jacc_meta <- Jacc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(data_new, by = c("SampleID" = "SampleID"))

my_column <- "Diet"

centroids <- aggregate(cbind(PC1,PC2)~get(my_column),Jacc_meta,mean)
colnames(centroids)[1] <- "Diet"

ggplot(Jacc_meta, aes(x=PC1, y=PC2, color=Diet)) +
  geom_point() + 
  geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Jacc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Jacc_PCoA$data$ProportionExplained[2], digits = 2), "%)"))

ggsave(paste0("output/Jaccard-ellipse_", my_column,".png"), height=3, width=4.5, device="png")

##############################################
#Obtain Alpha Diversity Box Plots#
##############################################
evenness = read_qza("evenness_vector.qza")$data %>% rownames_to_column("SampleID")
faith_pd = read_qza("faith_pd_vector.qza")$data %>% rownames_to_column("SampleID")
observed_otus = read_qza("observed_otus_vector.qza")$data %>% rownames_to_column("SampleID")
shannon = read_qza("shannon_vector.qza")$data %>% rownames_to_column("SampleID")

#Merge all alpha diversity measures with metadata
alpha_diversity = merge(x=faith_pd, y=evenness, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, observed_otus, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, shannon, by.x = "SampleID", by.y = "SampleID")
meta = merge(data_new, alpha_diversity, by.x = "SampleID", by.y = "SampleID")
row.names(meta) = meta$Row.names
meta = meta[order(row.names(meta)),]

#explore the normality of the alpha diversity metrics
#to test for normalcy statistically, we ran the Shapiro-Wilk test of normality.
#if the p value from Shapiro-Wilk is > 0.05 we assume normal distribution.We checked the variables if 
#they should be transformed but they should not be altered

#Plots
hist(meta$faith_pd, main="Faith phylogenetic diversity", xlab="", breaks=10)
ggqqplot(meta$faith_pd)
shapiro.test(meta$faith_pd)
#p < 0.05

meta <- mutate(meta, log_faith_pd = log(faith_pd))
meta <- mutate(meta, sqrt_faith_pd = sqrt(faith_pd))
#compare skewness of untransformed faith_pd to the newly transformed faith_pd
descr(meta$faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
descr(meta$log_faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown") 
descr(meta$sqrt_faith_pd, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
#NOTE: use log

hist(meta$pielou_e, main="Evenness", xlab="", breaks=15)
ggqqplot(meta$pielou_e)
shapiro.test(meta$pielou_e)
#p > 0.05

hist(meta$observed_otus, main="Observed OTUs", xlab="", breaks=15)
ggqqplot(meta$observed_otus)
shapiro.test(meta$observed_otus)
#p < 0.05

meta <- mutate(meta, log_observed_otus = log(observed_otus))
meta <- mutate(meta, sqrt_observed_otus = sqrt(observed_otus))
#compare skewness of untransformed observed_otus to the newly transformed observed_otus
descr(meta$observed_otus, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
descr(meta$log_observed_otus, stats = c("Skewness", "Kurtosis"), style="rmarkdown") 
descr(meta$sqrt_observed_otus, stats = c("Skewness", "Kurtosis"), style="rmarkdown")
#NOTE: use log

hist(meta$shannon, main="Shannon diversity", xlab="", breaks=10)
ggqqplot(meta$shannon)
shapiro.test(meta$shannon)
#p > 0.05

#load in names of alpha diversity measures
alpha_measures <- c("pielou_e", "log_faith_pd", "log_observed_otus", "shannon")
alpha_measures_names <- c("Pielou Evenness", "Log Faith Phylogenetic Diversity", "Log Observed ASVs", "Shannon")

##############################################
#Obtain Individual Alpha Diversity Box Plots#
##############################################
#run the ANOVA and save it as an object
i <- 1

for(i in 1:length(alpha_measures)){
  print(alpha_measures[i])
  aov.alpha_measures = aov(get(alpha_measures[i]) ~ Diet*SampleID, data=meta)
  #call for the summary of that ANOVA, which will include P-values
  print(summary(aov.alpha_measures))
  alpha_plot <- ggplot(meta, aes(Diet, get(alpha_measures[i]))) + 
    geom_boxplot(aes(Diet)) + 
    stat_summary(fun=none, geom="point", shape=3, size=2, color="black", fill="black") +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    ylab(alpha_measures_names[i]) 
  ggsave(paste0("output/", alpha_measures[i], "Diet.png"), alpha_plot, height = 3, width = 5)
}

##############################################
#Obtain Taxa Bar Plots# 
#Change the "my_column" to different categorical variables and use the script#
##############################################
physeq <- qza_to_phyloseq(
  features="rarefied_table.qza",
  tree="rooted-tree.qza",
  "taxonomy.qza",
  metadata = "ileal_metadata.tsv"
)

#get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq),check.names = F)
row.names(data_new)<-metadata$SampleID
tax.clean = tax.clean[row.names(tax.clean) %in% rownames(physeq_otu_table),]
metadata.filtered = data_new[data_new$SampleID %in% colnames(physeq_otu_table),]

#assign as variables to be feed into phyloseq
OTU.physeq = otu_table(as.matrix(physeq_otu_table), taxa_are_rows=TRUE)

#our edited and formatted taxonomy table from the top of this script
tax.physeq = tax_table(as.matrix(tax.clean))    
meta.physeq = sample_data(metadata.filtered)

#merge these into an object of class phyloseq
physeq_bar_plot = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

#set colors for plotting
my_colors <- c(
  '#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',
  '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928', 
  "#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
  "#AD6F3B", "#673770","#D14285", "#652926", "#C84248", 
  "#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861", "gray", "black", "pink",
  "blue", "orange", "green", "magenta", "violet", "red", "yellow"
)

#if you want different taxonomic level, find and replace the taxonomic level listed here
my_level <- c("Phylum", "Family", "Genus")
my_column <- "Diet"

abund_filter <- 0.02
for(ml in my_level){
  print(ml)
  taxa.summary <- physeq_bar_plot %>%
    tax_glom(taxrank = ml, NArm = FALSE) %>%  
    transform_sample_counts(function(x) {x/sum(x)} ) %>% 
    psmelt()  %>%                               
    group_by(get(my_column), get(ml)) %>%
    summarise(Abundance.average=mean(Abundance)) 
  taxa.summary <- as.data.frame(taxa.summary)
  colnames(taxa.summary)[1] <- my_column
  colnames(taxa.summary)[2] <- ml
  physeq.taxa.average <- taxa.summary %>% 
    group_by(get(ml)) %>%
    summarise(overall.max=max(Abundance.average))
  physeq.taxa.average <- as.data.frame(physeq.taxa.average)
  colnames(physeq.taxa.average)[1] <- ml
  
  #merge the phyla means with the metadata
  physeq_meta <- merge(taxa.summary, physeq.taxa.average)
  physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)
  
  #plot 
  ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
    geom_bar(stat = "identity") +
    scale_fill_manual(values = my_colors) +
    ylim(c(0,1)) +
    guides(fill = guide_legend(reverse = F, keywidth = 0.5, keyheight = 0.5, ncol = 1)) +
    theme(legend.text=element_text(size=8.5)) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
    theme(legend.title = element_blank()) +
    ylab("Relative Abundance") +
    xlab(my_column) +
    theme(axis.title = element_text(size = 10)) +
    theme(axis.text = element_text(size = 10)) +
    theme(legend.text = element_text(size = 10)) +
    ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 Treatment Group")) 
  ggsave(paste0("output/", ml, "BarPlot_Diet.png"), height = 4, width =5)
}

#################################################################
###Differential Abundance with DESeq2
#################################################################
#Adapted from https://joey711.github.io/phyloseq-extensions/DESeq2.html
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("DESeq2")

library (DESeq2)

#to use DESeq, we need no zeros in our OTU table. So we will edit the table by multiplying by 2 and + 1
#get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)
OTU.clean2 <- physeq_otu_table + 1

#now make the phyloseq object:
OTU.physeq = otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)
tax.physeq = tax_table(as.matrix(tax.clean))
meta.physeq = sample_data(metadata.filtered)

#merge these into an object of class phyloseq
physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

#the following two lines actually do all the complicated DESeq2 work. 
#the function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet
diagdds = phyloseq_to_deseq2(physeq_deseq, ~ Diet)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM

#investigate test results table
#the following results function call creates a table of the results of the tests
#Contrast: this argument specifies what comparison to extract from the object to build a results table
#  1. the name of a factor in the design formula, 
#  2. the name of the numerator level for the fold change, and 
#  3. the name of the denominator level for the fold change (simplest case)

alpha = 0.05
my_contrast = c("Diet", "Wheat_Bran", "Control")
res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))

#volcano Plot
#reset par
par(mfrow=c(1,1))

#make a basic volcano plot
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

#add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

#look at the OTUs that were significantly different between the two treatment groups
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))
DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 6, width = 10)

#################################################################
###Predict functional abundances based on marker gene sequences using PICRUIST
#################################################################
library("DESeq2")

#to use DESeq, we need no zeros in our OTU table so edit the table by multiplying by 2 and + 1
#get the OTU table from physeq
physeq <- qza_to_phyloseq(
  features="pathway_abundance.qza",
  metadata = "ileal_metadata.tsv"
)
physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)
min(physeq_otu_table)
OTU.clean2 <- physeq_otu_table + 1

#make the phyloseq object:
OTU.physeq <- otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)
meta.physeq <- sample_data(metadata.filtered)

#merge these into an object of class phyloseq.
physeq_deseq <- phyloseq(OTU.physeq, meta.physeq)

#DESeq work
diagdds = phyloseq_to_deseq2(physeq_deseq, ~ Diet)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")

#WB vs. Control
alpha = 0.01
my_contrast = c("Diet", "Control", "Wheat_Bran") 
res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)
sigtab <- res[which(res$padj < alpha), ]
sigtab <- as(sigtab, "data.frame")

#volcano Plot
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


#look at the OTUs that were significantly different between the two treatment groups
theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
  scale_fill_brewer(palette = palname, ...)
}
x = sigtab$log2FoldChange
names(x) <- row.names(sigtab)
x = sort(x, TRUE)
sigtab$pathway <- row.names(sigtab)
sigtab$pathway = factor(as.character(sigtab$pathway), levels=names(x))
str(sigtab$pathway)
DESeq_fig = ggplot(sigtab, aes(x = pathway, y = log2FoldChange)) + 
  geom_point(size=3) +
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  geom_hline(yintercept = 0) +
  #geom_text(x=9, y=1.5, label=my_contrast[2]) +
  #geom_text(x=3, y=-.75, label=my_contrast[3]) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))+
  theme(axis.text.x = element_text(color = "black", size = 10),
        axis.text.y =element_text(color = "black", size = 12)) 

ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 10, width = 15)

